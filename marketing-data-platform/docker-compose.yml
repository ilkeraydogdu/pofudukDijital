version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: marketing-postgres
    environment:
      POSTGRES_DB: marketing_platform
      POSTGRES_USER: marketing_user
      POSTGRES_PASSWORD: secure_password_here
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - marketing-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marketing_user -d marketing_platform"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OpenSearch (Elasticsearch alternative)
  opensearch:
    image: opensearchproject/opensearch:2.11.0
    container_name: marketing-opensearch
    environment:
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
      - DISABLE_SECURITY_PLUGIN=true
      - DISABLE_INSTALL_DEMO_CONFIG=true
      - compatibility.override_main_response_version=true
    volumes:
      - opensearch_data:/usr/share/opensearch/data
      - ./config/opensearch_mappings.json:/usr/share/opensearch/config/mappings.json
    ports:
      - "9200:9200"
      - "9600:9600"
    networks:
      - marketing-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # OpenSearch Dashboards (Kibana alternative)
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:2.11.0
    container_name: marketing-opensearch-dashboards
    environment:
      - OPENSEARCH_HOSTS=http://opensearch:9200
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true
    ports:
      - "5601:5601"
    networks:
      - marketing-network
    depends_on:
      opensearch:
        condition: service_healthy

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: marketing-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - marketing-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    container_name: marketing-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - marketing-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # FastAPI Application
  api:
    build:
      context: .
      target: api
    container_name: marketing-api
    environment:
      DATABASE_URL: postgresql://marketing_user:secure_password_here@postgres:5432/marketing_platform
      OPENSEARCH_HOST: opensearch
      OPENSEARCH_PORT: 9200
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MINIO_ENDPOINT: minio:9000
      GOOGLE_PLACES_API_KEY: ${GOOGLE_PLACES_API_KEY}
      FOURSQUARE_API_KEY: ${FOURSQUARE_API_KEY}
      HUNTER_IO_API_KEY: ${HUNTER_IO_API_KEY}
    volumes:
      - ./src:/app/src
      - ./config:/app/config
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - marketing-network
    depends_on:
      postgres:
        condition: service_healthy
      opensearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Airflow Webserver
  airflow-webserver:
    build:
      context: .
      target: airflow-webserver
    container_name: marketing-airflow-webserver
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql://marketing_user:secure_password_here@postgres:5432/marketing_platform
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__WEBSERVER__SECRET_KEY: 'your-secret-key-here'
    volumes:
      - ./airflow:/app/airflow
      - ./src:/app/src
      - airflow_logs:/app/airflow/logs
    ports:
      - "8080:8080"
    networks:
      - marketing-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: .
      target: airflow-scheduler
    container_name: marketing-airflow-scheduler
    environment:
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql://marketing_user:secure_password_here@postgres:5432/marketing_platform
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      GOOGLE_PLACES_API_KEY: ${GOOGLE_PLACES_API_KEY}
      GOOGLE_CSE_API_KEY: ${GOOGLE_CSE_API_KEY}
      GOOGLE_CSE_CX: ${GOOGLE_CSE_CX}
    volumes:
      - ./airflow:/app/airflow
      - ./src:/app/src
      - airflow_logs:/app/airflow/logs
    networks:
      - marketing-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # dbt for data transformation
  dbt:
    build:
      context: .
      target: app
    container_name: marketing-dbt
    command: ["dbt", "run", "--project-dir", "/app/dbt", "--profiles-dir", "/app/dbt"]
    environment:
      DBT_PROFILES_DIR: /app/dbt
      DATABASE_URL: postgresql://marketing_user:secure_password_here@postgres:5432/marketing_platform
    volumes:
      - ./dbt:/app/dbt
    networks:
      - marketing-network
    depends_on:
      postgres:
        condition: service_healthy

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: marketing-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - marketing-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: marketing-grafana
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - marketing-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: marketing-nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/nginx-sites:/etc/nginx/conf.d
    ports:
      - "80:80"
      - "443:443"
    networks:
      - marketing-network
    depends_on:
      - api
      - airflow-webserver
    restart: unless-stopped

networks:
  marketing-network:
    driver: bridge

volumes:
  postgres_data:
  opensearch_data:
  redis_data:
  minio_data:
  airflow_logs:
  prometheus_data:
  grafana_data: